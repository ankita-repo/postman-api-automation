{
	"info": {
		"_postman_id": "3eac6be1-a580-40e5-9b30-45f532f57cf4",
		"name": "employee-api-testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "2601330"
	},
	"item": [
		{
			"name": "Get All Post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// this checks the status code of request\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// this is checking that there is some result comming\r",
							"pm.test(\"Contains at leat one test\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length).to.not.eqls(0);\r",
							"});\r",
							"\r",
							"pm.test(\"checks if title of first post is not empty\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0].title.length).to.not.eqls(0);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{HOST}}/posts",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Post By Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// this checks the status code of request\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{HOST}}/posts/1",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"posts",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create New Post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// this checks the status code of request\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"// store the post response to use in put request\r",
							"var jsonData = pm.response.json();\r",
							"pm.environment.set(\"postObj\", JSON.stringify(jsonData));\r",
							"pm.environment.set(\"postId\", jsonData.id);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"Post title\",\r\n    \"author\": \"John Doe\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{HOST}}/posts",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Post",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var postString = pm.environment.get(\"postObj\");\r",
							"\r",
							"var post = JSON.parse(postString);\r",
							"\r",
							"console.log('post string is ');\r",
							"console.log(postString);\r",
							"\r",
							"// Updating the request body\r",
							"post.title = \"Heavy Rainful in Bangalore\";\r",
							"post.author = \"Gaurish Akki\";\r",
							"\r",
							"pm.environment.set(\"postObj\", JSON.stringify(post) );\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{postObj}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{HOST}}/posts/:id",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"posts",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{postId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete the post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var urlOfDeletedPost =  pm.environment.get(\"HOST\")+\"/posts/\"+pm.environment.get(\"postId\");\r",
							"\r",
							"\r",
							"pm.test(\"Check if the existing post exist after DELETE call\", function () {\r",
							"    pm.sendRequest(urlOfDeletedPost, function (err, response) {\r",
							"        pm.expect(response.code).to.eqls(404);\r",
							"        pm.expect(response.status).to.eqls(\"Not Found\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var urlOfDeletedPost =  pm.environment.get(\"HOST\")+\"/posts/\"+pm.environment.get(\"postId\");\r",
							"\r",
							"pm.test(\"Check if the existing post exist before DELETE call\", function () {\r",
							"    pm.sendRequest(urlOfDeletedPost, function (err, response) {\r",
							"        pm.expect(response.code).to.eqls(200);\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{HOST}}/posts/:id",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"posts",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{postId}}"
						}
					]
				}
			},
			"response": []
		}
	]
}